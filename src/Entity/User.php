<?php    namespace App\Entity;    use App\Repository\UserRepository;    use Doctrine\Common\Collections\ArrayCollection;    use Doctrine\Common\Collections\Collection;    use Symfony\Component\Security\Core\User\UserInterface;    use Doctrine\ORM\Mapping as ORM;    use Symfony\Component\Validator\Constraints as Assert;    /**     * @ORM\Entity(repositoryClass=UserRepository::class)     */    class User implements UserInterface    {        /**         * @ORM\Id         * @ORM\GeneratedValue         * @ORM\Column(type="integer")         */        private $id;        /**         * @ORM\Column(type="string", length=255)         */        private $password;        /**         * @Assert\EqualTo(propertyPath="password", message="Vous n'avez pas tapÃ© le meme mot de passe")         */        public $confirmpassword;        /**         * @ORM\Column(type="json")         */        private $roles = [];        /**         * @ORM\Column(type="string", length=255)         */        private $email;        /**         * @ORM\Column(type="string", length=255)         */        private $nom;        /**         * @ORM\Column(type="string", length=255)         */        private $prenom;        /**         * @ORM\Column(type="string", length=50, nullable=true)         */        private $acitvation_token;        /**         * @ORM\Column(type="string", length=50, nullable=true)         */        private $reset_token;        /**         * @ORM\OneToMany(targetEntity=Notes::class, mappedBy="user", orphanRemoval=true)         */        private $notes;        /**         * @ORM\OneToMany(targetEntity=Notes::class, mappedBy="auteur", orphanRemoval=true)         */        private $mesNotes;        public function __construct()        {            $this->notes = new ArrayCollection();            $this->mesNotes = new ArrayCollection();        }        public function getId(): ?int        {            return $this->id;        }        public function getPassword(): ?string        {            return $this->password;        }        public function setPassword(string $password): self        {            $this->password = $password;            return $this;        }        public function getRoles(): ?array        {            $roles = $this->roles;            // guarantee every user at least has ROLE_USER            $roles[] = 'ROLE_USER';            return array_unique($roles);        }        public function setRoles(array $roles): self        {            $this->roles = $roles;            return $this;        }        public function getEmail(): ?string        {            return $this->email;        }        public function setEmail(string $email): self        {            $this->email = $email;            return $this;        }        public function getNom(): ?string        {            return $this->nom;        }        public function setNom(string $nom): self        {            $this->nom = $nom;            return $this;        }        public function getPrenom(): ?string        {            return $this->prenom;        }        public function setPrenom(string $prenom): self        {            $this->prenom = $prenom;            return $this;        }        public function getAcitvationToken(): ?string        {            return $this->acitvation_token;        }        public function setAcitvationToken(?string $acitvation_token): self        {            $this->acitvation_token = $acitvation_token;            return $this;        }        public function getResetToken(): ?string        {            return $this->reset_token;        }        public function setResetToken(?string $reset_token): self        {            $this->reset_token = $reset_token;            return $this;        }        public function getSalt()        {            // TODO: Implement getSalt() method.        }        public function getUsername()        {            // TODO: Implement getUsername() method.        }        public function eraseCredentials()        {            // TODO: Implement eraseCredentials() method.        }        /**         * @return Collection|Notes[]         */        public function getNotes(): Collection        {            return $this->notes;        }        public function addNote(Notes $note): self        {            if (!$this->notes->contains($note)) {                $this->notes[] = $note;                $note->setUser($this);            }            return $this;        }        public function removeNote(Notes $note): self        {            if ($this->notes->removeElement($note)) {                // set the owning side to null (unless already changed)                if ($note->getUser() === $this) {                    $note->setUser(null);                }            }            return $this;        }        /**         * @return Collection|Notes[]         */        public function getMesNotes(): Collection        {            return $this->mesNotes;        }        public function addMesNote(Notes $mesNote): self        {            if (!$this->mesNotes->contains($mesNote)) {                $this->mesNotes[] = $mesNote;                $mesNote->setAuteur($this);            }            return $this;        }        public function removeMesNote(Notes $mesNote): self        {            if ($this->mesNotes->removeElement($mesNote)) {                // set the owning side to null (unless already changed)                if ($mesNote->getAuteur() === $this) {                    $mesNote->setAuteur(null);                }            }            return $this;        }        public function __toString()        {            return $this->nom;        }    }