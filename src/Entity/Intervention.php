<?php    namespace App\Entity;    use App\Repository\InterventionRepository;    use Doctrine\Common\Collections\ArrayCollection;    use Doctrine\Common\Collections\Collection;    use Doctrine\ORM\Mapping as ORM;    /**     * @ORM\Entity(repositoryClass=InterventionRepository::class)     */    class Intervention    {        /**         * @ORM\Id         * @ORM\GeneratedValue         * @ORM\Column(type="integer")         */        private $id;        /**         * @ORM\Column(type="string", length=255)         */        private $nom;        /**         * @ORM\ManyToMany(targetEntity=Produit::class, mappedBy="interventions")         */        private $produits;        /**         * @ORM\OneToMany(targetEntity=PrixInter::class, mappedBy="Intervention", orphanRemoval=true)         */        private $prixInters;        /**         * @ORM\Column(type="string", length=250, nullable=true)         */        private $image;

/**
 * @ORM\Column(type="integer", nullable=true)
 */
private $nOrder;        public function __construct()        {            $this->produits = new ArrayCollection();            $this->prixInters = new ArrayCollection();        }        public function getId(): ?int        {            return $this->id;        }        public function getNom(): ?string        {            return $this->nom;        }        public function setNom(string $nom): self        {            $this->nom = $nom;            return $this;        }        /**         * @return Collection|Produit[]         */        public function getProduits(): Collection        {            return $this->produits;        }        public function addProduit(Produit $produit): self        {            if (!$this->produits->contains($produit)) {                $this->produits[] = $produit;                $produit->addIntervention($this);            }            return $this;        }        public function removeProduit(Produit $produit): self        {            if ($this->produits->removeElement($produit)) {                $produit->removeIntervention($this);            }            return $this;        }        /**         * @return Collection|PrixInter[]         */        public function getPrixInters(): Collection        {            return $this->prixInters;        }        public function addPrixInter(PrixInter $prixInter): self        {            if (!$this->prixInters->contains($prixInter)) {                $this->prixInters[] = $prixInter;                $prixInter->setIntervention($this);            }            return $this;        }        public function removePrixInter(PrixInter $prixInter): self        {            if ($this->prixInters->removeElement($prixInter)) {                // set the owning side to null (unless already changed)                if ($prixInter->getIntervention() === $this) {                    $prixInter->setIntervention(null);                }            }            return $this;        }        public function getImage(): ?string        {            return $this->image;        }        public function setImage(?string $image): self        {            $this->image = $image;            return $this;        }

public function getNOrder(): ?int
{
    return $this->nOrder;
}

public function setNOrder(?int $nOrder): self
{
    $this->nOrder = $nOrder;

    return $this;
}    }