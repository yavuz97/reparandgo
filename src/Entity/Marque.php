<?php    namespace App\Entity;    use App\Repository\MarqueRepository;    use Doctrine\Common\Collections\ArrayCollection;    use Doctrine\Common\Collections\Collection;    use Doctrine\ORM\Mapping as ORM;    use Symfony\Component\HttpFoundation\File\File;    use Vich\UploaderBundle\Mapping\Annotation as Vich;    /**     * @ORM\Entity(repositoryClass=MarqueRepository::class)     * @Vich\Uploadable()     */    class Marque    {        /**         * @ORM\Id         * @ORM\GeneratedValue         * @ORM\Column(type="integer")         */        private $id;        /**         * @ORM\Column(type="string", length=255)         */        private $nom;        /**         * @ORM\OneToMany(targetEntity=Produit::class, mappedBy="marque")         * @ORM\OrderBy({"dateModel" = "DESC"})         */        private $produits;        /**         * @ORM\OneToMany(targetEntity=Serie::class, mappedBy="marque", orphanRemoval=true)         */        private $series;        /**         * @ORM\Column(type="string", length=100, nullable=true)         */        private $image;        /**         * @Vich\UploadableField(mapping="brand_images", fileNameProperty="image")         * @var File         */        private $imageFile;        /**         * @ORM\Column(type="datetime", nullable=true)         * @var \DateTime         */        private $updatedAt;        public function setImageFile(File $image = null)        {            $this->imageFile = $image;            // VERY IMPORTANT:            // It is required that at least one field changes if you are using Doctrine,            // otherwise the event listeners won't be called and the file is lost            if ($image) {                // if 'updatedAt' is not defined in your entity, use another property                $this->updatedAt = new \DateTime('now');            }        }        public function getImageFile()        {            return $this->imageFile;        }        public function __construct()        {            $this->produits = new ArrayCollection();            $this->series = new ArrayCollection();        }        public function getId(): ?int        {            return $this->id;        }        public function getNom(): ?string        {            return $this->nom;        }        public function setNom(string $nom): self        {            $this->nom = $nom;            return $this;        }        /**         * @return Collection|Produit[]         */        public function getProduits(): Collection        {            return $this->produits;        }        public function addProduit(Produit $produit): self        {            if (!$this->produits->contains($produit)) {                $this->produits[] = $produit;                $produit->setMarque($this);            }            return $this;        }        public function removeProduit(Produit $produit): self        {            if ($this->produits->removeElement($produit)) {                // set the owning side to null (unless already changed)                if ($produit->getMarque() === $this) {                    $produit->setMarque(null);                }            }            return $this;        }        /**         * @return Collection|Serie[]         */        public function getSeries(): Collection        {            return $this->series;        }        public function addSerie(Serie $serie): self        {            if (!$this->series->contains($serie)) {                $this->series[] = $serie;                $serie->setMarque($this);            }            return $this;        }        public function removeSerie(Serie $serie): self        {            if ($this->series->removeElement($serie)) {                // set the owning side to null (unless already changed)                if ($serie->getMarque() === $this) {                    $serie->setMarque(null);                }            }            return $this;        }        public function __toString()        {            return $this->nom;        }        public function getImage(): ?string        {            return $this->image;        }        public function setImage(?string $image): self        {            $this->image = $image;            return $this;        }        public function getUpdatedAt(): ?\DateTimeInterface        {            return $this->updatedAt;        }        public function setUpdatedAt(?\DateTimeInterface $updatedAt): self        {            $this->updatedAt = $updatedAt;            return $this;        }    }