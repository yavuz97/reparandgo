<?php    namespace App\Repository;    use App\Entity\Produit;    use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;    use Doctrine\Persistence\ManagerRegistry;    /**     * @method Produit|null find($id, $lockMode = null, $lockVersion = null)     * @method Produit|null findOneBy(array $criteria, array $orderBy = null)     * @method Produit[]    findAll()     * @method Produit[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)     */    class ProduitRepository extends ServiceEntityRepository    {        public function __construct(ManagerRegistry $registry)        {            parent::__construct($registry, Produit::class);        }        public function findByMarqueDate($value)        {            return $this->createQueryBuilder('p')                ->andWhere('p.marque = :val')                ->setParameter('val', $value)                ->orderBy('p.categorie', 'ASC')                ->orderBy('p.serie', 'ASC')                ->addorderBy('p.dateModel', 'DESC')                ->getQuery()                ->getResult();        }        public function findBySerieDate($value)        {            return $this->createQueryBuilder('p')                ->andWhere('p.serie = :val')                ->setParameter('val', $value)                ->orderBy('p.categorie', 'ASC')                ->orderBy('p.serie', 'ASC')                ->addorderBy('p.dateModel', 'DESC')                ->getQuery()                ->getResult();        }        public function findByMarqueCategorieDate($id_marque,$id_cat )        {            return $this->createQueryBuilder('p')                ->andWhere('p.marque = :id_marque')                ->andWhere('p.categorie = :id_cat')                ->setParameter('id_marque', $id_marque)                ->setParameter('id_cat', $id_cat)                ->orderBy('p.categorie', 'ASC')                ->orderBy('p.serie', 'ASC')                ->addorderBy('p.dateModel', 'DESC')                ->getQuery()                ->getResult();        }        public function findPrixInterventions($id_produit)        {            return $this->createQueryBuilder('p')                ->select('i.nom',  'pi.prix', 'i.image as image')                ->join('p.prixInters', 'pi')                ->join('pi.Intervention', 'i')                ->andWhere('p.id = :id_produit')                ->setParameter('id_produit', $id_produit)                ->orderBy('i.nOrder', 'ASC')                ->getQuery()                ->getResult();        }////    public function findBySerie($serieId)//    {//        $entityManager = $this->getEntityManager();////        $query = $entityManager->createQuery(//            'SELECT p.id//        FROM App\Entity\Produit p//        INNER JOIN p.serie serie//        WHERE serie.id = :id'//        )->setParameter('id', $serieId);////        return $query->getResult();//    }//    public function findBySerieX($serieId)//    {//        return $this->createQueryBuilder('ph')//            ->join('ph.serie', 'serie')//            ->andWhere('serie = :id')////            ->addSelect('serie')//            ->setParameter('id', $serieId)//            ->getQuery()//            ->getResult();//    }        // /**        //  * @return Produit[] Returns an array of Produit objects        //  */        /*        public function findByExampleField($value)        {            return $this->createQueryBuilder('p')                ->andWhere('p.exampleField = :val')                ->setParameter('val', $value)                ->orderBy('p.id', 'ASC')                ->setMaxResults(10)                ->getQuery()                ->getResult()            ;        }        */        /*        public function findOneBySomeField($value): ?Produit        {            return $this->createQueryBuilder('p')                ->andWhere('p.exampleField = :val')                ->setParameter('val', $value)                ->getQuery()                ->getOneOrNullResult()            ;        }        */    }