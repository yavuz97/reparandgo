<?php    namespace App\Controller\Admin;    use App\Entity\Intervention;    use EasyCorp\Bundle\EasyAdminBundle\Config\Action;    use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;    use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;    use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;    use EasyCorp\Bundle\EasyAdminBundle\Field\FormField;    use EasyCorp\Bundle\EasyAdminBundle\Field\IntegerField;    use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;    class InterventionCrudController extends AbstractCrudController    {        public static function getEntityFqcn(): string        {            return Intervention::class;        }        public function configureActions(Actions $actions): Actions        {            // if the method is not defined in a CRUD controller, link to its route            $interventionUp = Action::new('up', '', 'fa fa-arrow-up')                // 2) using a callable (useful if parameters depend on the entity instance)                // (the type-hint of the function argument is optional but useful)                ->linkToRoute('interUp', function (Intervention $intervention): array {                    return [                        'id' => $intervention->getId(),                    ];                });            // if the method is not defined in a CRUD controller, link to its route            $interventionDown = Action::new('down', '', 'fa fa-arrow-down')                // 2) using a callable (useful if parameters depend on the entity instance)                // (the type-hint of the function argument is optional but useful)                ->linkToRoute('interDown', function (Intervention $intervention): array {                    return [                        'id' => $intervention->getId(),                    ];                });            // if the method is not defined in a CRUD controller, link to its route            $interventionOrderList = Action::new('interventionOrderList', '', 'fa fa-list-ol')                // 2) using a callable (useful if parameters depend on the entity instance)                // (the type-hint of the function argument is optional but useful)                ->linkToRoute('interventionOrderList');            return $actions                // ...                ->add(Crud::PAGE_INDEX, $interventionUp)                ->add(Crud::PAGE_INDEX, $interventionDown)                ->add(Crud::PAGE_INDEX, $interventionOrderList);        }        public function configureFields(string $pageName): iterable        {            return [                TextField::new('nom'),                FormField::addPanel('Ajout d\'icone ')                    ->setIcon('phone')->addCssClass('optional')                    ->setHelp('Veuillez copier le lien d\'icone sur le site "https://fontawesome.com/v4.7/icons/" '),                TextField::new('image'),                IntegerField::new('nOrder'),            ];        }    }